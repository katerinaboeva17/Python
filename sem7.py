# Задача 1
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# def find_orb(orbits):
#     return max(orbits, key = lambda x: x[0]*x[1] if x[0] != x[1] else -1)
# print(find_orb(orbits))

# Задача 2
# Напишите функцию same_by(characteristic, objects), которая
# проверяет, все ли объекты имеют одинаковое значение
# некоторой характеристики, и возвращают True, если это так.
# Если значение характеристики для разных объектов
# отличается - то False. Для пустого набора объектов, функция
# должна возвращать True. Аргумент characteristic - это
# функция, которая принимает объект и вычисляет его
# характеристику.

# values = [0, 2, 10, 6] 
# def same_by(func, collection):
#     return(len(list(filter(func, collection)))) == 0
# if same_by(lambda x: x % 2, values):
#     print('same')
# else:
#     print('different')

# Задача 3
# a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# Перебрать все элемента этого списка с помощью функции enumerate и элементы,
# стоящие на главной диагонали, заменить нулями.

# a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# for ind1, val1 in enumerate(a):
#     for ind2, val2 in enumerate(val1):
#         if ind2 == ind1:
#             a[ind1][ind2] = 0
# print(a)

# Задача 4
# Имеется список id сотрудников из 10 элементов. Каждый id случайное число от 1 до 100.
# Имеется список имен сотрудников из 10 элементов. Сопоставьте каждому имени его id по порядку.
# Отсортируйте список по возрастанию id.
# Выведите имена сотрудников, получившиих нечётный id.

# import random
# id = [random.randint(1, 100) for i in range(10)]
# name = ['Ivanov', 'Petrov', 'Sidorov', 'Nikolaev', 'Borisov', 'Aleksandrov', 'Vasin', 'Tokarev', 'Sviridov', 'Stepanov']
# lst = list(zip(id, name))
# print(lst)
# lst.sort(key = lambda x: (x[0]))
# print(lst)
# spisok = list(filter(lambda x: x[0] % 2 != 0, lst))
# print(spisok)

# Home work
# Задача 1
# Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. Поскольку
# разобраться в его кричалках не настолько просто, насколько легко он их придумывает, Вам
# стоит написать программу. Винни-Пух считает, что ритм есть, если число слогов (т.е. число
# гласных букв) в каждой фразе стихотворения одинаковое. Фраза может состоять из одного
# слова, если во фразе несколько слов, то они разделяются дефисами. Фразы отделяются друг
# от друга пробелами. Стихотворение Винни-Пух вбивает в программу с клавиатуры. В ответе
# напишите “Парам пам-пам”, если с ритмом все в порядке и “Пам парам”, если с ритмом все не в порядке.

# str = 'парарарам рампампапам парападам'
# str = str.split()
# for i in range(len(str)):
#     str[i] = list(str[i])
# list = []
# for ind1, val1 in enumerate(str):
#     count = 0
#     for ind2, val2 in enumerate(val1):
#         if str[ind1][ind2] in ['а', 'у', 'е', 'ы', 'о', 'э', 'я', 'и', 'ю']:
#             count += 1
#     list.append(count)
# if len(set(list)) == 1:
#     print('Парам пам-пам')
# else:
#     print('Пам парам')

# Задача 2
# Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6),
# которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и
# столбца. Аргументы num_rows и num_columns указывают число строк и столбцов таблицы,
# которые должны быть распечатаны. Нумерация строк и столбцов идет с единицы (подумайте,
# почему не с нуля). Примечание: бинарной операцией называется любая операция, у которой
# ровно два аргумента, как, например, у операции умножения.

# def print_operation_table(x, y):
#     for i in range(1, x+1):
#         for j in range(1, y+1):
#             print(i*j, end=' ')
#         print()
# print_operation_table(6, 6)

            

